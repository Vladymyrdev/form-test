import Head from 'next/head';
import styles from '../styles/Home.module.css';
import {
  Box,
  Button,
  FormControl,
  FormControlLabel,
  FormLabel,
  MenuItem,
  Radio,
  RadioGroup,
  Select,
  SelectChangeEvent,
  TextField,
} from '@mui/material';
import { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';
import { DesktopDatePicker, LocalizationProvider } from '@mui/x-date-pickers';
import { ChangeEvent, useState } from 'react';
import moment from 'moment';
import InfoModal from './components/InfoModal';

interface IUser {
  name: string;
  email: string;
  date: string;
  role: string;
  sex: string;
}

export const validateEmail = (str = '') => str.includes('@');

export default function Page() {
  const [openModal, setOpenModal] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [user, setUser] = useState<IUser>({
    name: 'John',
    email: 'example@bus.co',
    date: moment().format('LL'),
    role: 'free',
    sex: 'female',
  });

  const toggleOpenModal = () => {
    setOpenModal((prev) => !prev);
  };

  const handleChangeDate = (newValue: any) => {
    const date = moment(newValue).format('LL');
    setUser((prev) => ({ ...prev, date }));
  };

  const handleChangeValue = (e: ChangeEvent<HTMLInputElement>) => {
    setUser((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleChangeSelectValue = (e: SelectChangeEvent) => {
    setUser((prev) => ({ ...prev, role: e.target.value as string }));
  };

  const handleSubmit = (e: { preventDefault: () => void }) => {
    e.preventDefault();
    if (!validateEmail(user.email)) {
      setError('Field is not valid');
      setOpenModal(true);
    } else {
      setError('');
      setOpenModal(true);
      console.log('SUBMIT!', user);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Box component="form" noValidate autoComplete="off" onSubmit={handleSubmit}>
          <FormControl
            sx={{
              gap: '20px',
              background: '#fff',
              padding: '20px',
              width: '450px',
              borderRadius: '10px',
            }}>
            <TextField
              id="outlined-basic"
              label="Name"
              variant="outlined"
              value={user.name}
              name="name"
              onChange={handleChangeValue}
            />
            <Select
              labelId="demo-simple-select-label"
              id="demo-simple-select"
              value={user.role}
              onChange={handleChangeSelectValue}>
              <MenuItem value="free">Free</MenuItem>
              <MenuItem value="medium">Medium</MenuItem>
              <MenuItem value="premium">Premium</MenuItem>
            </Select>
            <LocalizationProvider dateAdapter={AdapterMoment}>
              <DesktopDatePicker
                label="Date of Birth"
                inputFormat="MM/DD/YYYY"
                value={new Date()}
                onChange={handleChangeDate}
                renderInput={(params) => <TextField {...params} />}
              />
            </LocalizationProvider>
            <FormLabel id="demo-radio-buttons-group-label">Gender</FormLabel>
            <RadioGroup
              aria-labelledby="demo-radio-buttons-group-label"
              defaultValue="female"
              name="radio-buttons-group"
              row
              value={user.sex}
              onChange={handleChangeValue}>
              <FormControlLabel value="female" control={<Radio />} label="Female" name="sex" />
              <FormControlLabel value="male" control={<Radio />} label="Male" name="sex" />
            </RadioGroup>
            <TextField
              id="outlined-basic"
              label="Email"
              variant="outlined"
              value={user.email}
              name="email"
              onChange={handleChangeValue}
            />
            <Button type="submit" variant="contained" color="primary" role="button">
              SUBMIT
            </Button>
          </FormControl>
        </Box>
        <InfoModal open={openModal} toggleOpen={toggleOpenModal} isError={!!error} />
      </main>
    </>
  );
}
